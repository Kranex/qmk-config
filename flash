#!/usr/bin/env bash
LB=$'\n'
SCRIPT_DIR=$(readlink -f ${BASH_SOURCE%/*})

if [[ ! -f .env.local ]]; then
  echo "Please read the README and create a .env.local"
  exit 1
fi

source .env.local

if [[ -z "$IMAGE" ]]; then
  echo "Please read the README and specify your device mountpoint in '.env.local'"
  exit 1
fi

if [[ -z "$DEVICES" ]]; then
  echo "Please read the README and specify your device mountpoint in '.env.local'"
  exit 1
fi

DIR=$(readlink -f $1)

if [[ ! -f $DIR/.env.config ]]; then
  echo "Keymap DIR Does not contain an '.env.config'. Please Read the README."
  exit 1
fi

source $DIR/.env.config

if [[ -z "$BOARD" ]]; then
  echo "\$BOARD is not defined. Please read the README."
  exit
fi

if [[ -z "$VARIANT" ]]; then
  echo "\$VARIANT is not defined. Please read the README."
  exit
fi

if [[ ! -z "$2" ]]; then
  TARGET=$2
fi

INTERNAL="${DIR//\//\_}_$BOARD_${VARIANT//\//\_}"

CMD_BUILDER=("docker run -ti --init --privileged")

for group in "${ADD_GROUPS[@]}"; do
  CMD_BUILDER+=("--group-add $group")
done

CMD_BUILDER+=("-v $SCRIPT_DIR/.build:/qmk_firmware/.build")
CMD_BUILDER+=("-v $DIR:/qmk_firmware/keyboards/$BOARD/keymaps/$INTERNAL")

for device in "${DEVICES[@]}"; do
  CMD_BUILDER+=("-v $device:$device")
done

if [[ -d $DIR/overrides ]]; then
  OVERRIDES=()
  mapfile -d $'\0' OVERRIDES < <(find $DIR/overrides -type f -print0)
  for custom in "${OVERRIDES[@]}"; do 
    override=$(echo $custom | sed "s,$DIR/overrides,/qmk_firmware,g")
    CMD_BUILDER+=("-v $custom:$override")
  done
fi

CMD_BUILDER+=("$IMAGE make $BOARD/$VARIANT:$INTERNAL")

if [[ ! -z "$TARGET" ]]; then
  CMD_BUILDER[-1]+=":$TARGET"
fi

CMD=""

for part in "${CMD_BUILDER[@]}"; do
  echo $part
  CMD="$CMD $part"
done

$CMD
